%%%%%%%%%%%%%%%%%%%
% Team 7 Capstone Project
% Inertance Calculation
% Latest Revision: 4/7/2025
%%%%%%%%%%%%%%%%%%%

clear,clc,close all

%% Data Processing
% This section will be used to import the data from Arduino and MATLAB into
% vectors of time, force, and acceleration
dataAcc = readmatrix('DataSheet.csv');
force_exp = [-0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,-0.00,-0.00,-0.00,0.01,0.03,0.06,0.08,0.08,0.08,0.06,0.03,0.02,0.02,0.03,0.05,0.08,0.11,0.14,0.15,0.15,0.11,0.06,-0.00,-0.03,-0.02,0.02,0.13,0.24,0.30,0.28,0.23,0.10,-0.07,-0.16,-0.15,-0.05,0.10,0.33,0.49,0.54,0.42,0.25,-0.02,-0.32,-0.51,-0.51,-0.31,-0.04,0.40,0.79,0.95,0.82,0.52,0.06,-0.39,-0.72,-0.79,-0.55,-0.07,0.50,1.06,1.36,1.30,0.93,0.39,-0.20,-0.70,-0.93,-0.76,-0.24,0.42,1.08,1.51,1.58,1.27,0.71,0.08,-0.51,-0.88,-0.88,-0.47,0.18,0.88,1.45,1.69,1.53,1.04,0.40,-0.25,-0.75,-0.94,-0.69,-0.12,0.58,1.24,1.63,1.64,1.27,0.68,0.02,-0.57,-0.91,-0.85,-0.40,0.27,0.97,1.51,1.69,1.48,0.95,0.31,-0.33,-0.79,-0.92,-0.62,-0.02,0.68,1.31,1.66,1.61,1.20,0.59,-0.07,-0.64,-0.94,-0.82,-0.33,0.35,1.04,1.54,1.67,1.41,0.86,0.21,-0.41,-0.84,-0.91,-0.56,0.07,0.76,1.37,1.67,1.58,1.13,0.52,-0.14,-0.68,-0.92,-0.75,-0.21,0.48,1.16,1.61,1.69,1.37,0.80,0.14,-0.47,-0.86,-0.87,-0.47,0.17,0.87,1.45,1.70,1.54,1.06,0.42,-0.23,-0.73,-0.92,-0.69,-0.12,0.58,1.24,1.64,1.66,1.30,0.71,0.05,-0.54,-0.89,-0.84,-0.40,0.27,0.97,1.51,1.70,1.50,0.98,0.33,-0.30,-0.77,-0.91,-0.62,-0.03,0.67,1.31,1.66,1.63,1.23,0.63,-0.03,-0.60,-0.91,-0.81,-0.32,0.36,1.05,1.55,1.69,1.43,0.89,0.23,-0.38,-0.82,-0.90,-0.56,0.06,0.75,1.36,1.67,1.58,1.14,0.53,-0.13,-0.67,-0.92,-0.76,-0.24,0.45,1.13,1.59,1.67,1.36,0.80,0.14,-0.46,-0.86,-0.88,-0.49,0.16,0.86,1.43,1.69,1.55,1.07,0.44,-0.21,-0.72,-0.93,-0.71,-0.15,0.56,1.22,1.63,1.66,1.30,0.71,0.05,-0.54,-0.90,-0.86,-0.42,0.24,0.95,1.49,1.69,1.50,0.99,0.34,-0.30,-0.78,-0.93,-0.66,-0.07,0.64,1.27,1.64,1.62,1.22,0.62,-0.04,-0.61,-0.93,-0.83,-0.35,0.33,1.02,1.53,1.68,1.44,0.90,0.25,-0.37,-0.81,-0.91,-0.58,0.03,0.73,1.34,1.66,1.58,1.14,0.53,-0.12,-0.67,-0.93,-0.78,-0.27,0.43,1.11,1.58,1.68,1.39,0.83,0.17,-0.44,-0.85,-0.89,-0.51,0.13,0.82,1.41,1.68,1.55,1.08,0.45,-0.20,-0.72,-0.94,-0.73,-0.18,0.52,1.18,1.61,1.66,1.32,0.74,0.08,-0.52,-0.89,-0.87,-0.44,0.22,0.92,1.47,1.69,1.50,1.00,0.36,-0.29,-0.78,-0.95,-0.69,-0.10,0.60,1.25,1.62,1.62,1.23,0.63,-0.04,-0.62,-0.94,-0.86,-0.39,0.29,0.99,1.51,1.68,1.45,0.92,0.27,-0.36,-0.82,-0.93,-0.62,-0.01,0.69,1.31,1.65,1.58,1.16,0.55,-0.12,-0.67,-0.95,-0.81,-0.30,0.39,1.08,1.56,1.68,1.39,0.84,0.18,-0.44,-0.86,-0.91,-0.55,0.09,0.79,1.38,1.67,1.55,1.09,0.46,-0.20,-0.73,-0.96,-0.78,-0.23,0.47,1.14,1.58,1.64,1.31,0.74,0.08,-0.53,-0.91,-0.90,-0.49,0.17,0.87,1.43,1.67,1.51,1.02,0.38,-0.27,-0.78,-0.96,-0.72,-0.14,0.56,1.22,1.61,1.62,1.24,0.64,-0.02,-0.61,-0.95,-0.89,-0.43,0.24,0.94,1.47,1.66,1.44,0.92,0.27,-0.36,-0.82,-0.95,-0.65,-0.04,0.66,1.29,1.64,1.59,1.18,0.57,-0.10,-0.66,-0.96,-0.84,-0.34,0.35,1.04,1.53,1.65,1.38,0.83,0.18,-0.44,-0.87,-0.93,-0.58,0.05,0.75,1.35,1.65,1.55,1.10,0.48,-0.17,-0.69,-0.93,-0.76,-0.25,0.41,1.06,1.50,1.59,1.29,0.74,0.10,-0.46,-0.85,-0.87,-0.49,0.13,0.77,1.32,1.56,1.42,0.96,0.38,-0.22,-0.69,-0.88,-0.67,-0.15,0.50,1.11,1.50,1.53,1.20,0.65,0.05,-0.50,-0.83,-0.80,-0.39,0.23,0.88,1.38,1.57,1.38,0.89,0.30,-0.29,-0.74,-0.88,-0.62,-0.08,0.57,1.16,1.50,1.47,1.10,0.54,-0.07,-0.59];      % Experimental force data from Arduino (N)
force_time = 0;     % Time domain of Force Data (s)
acc_exp = dataAcc(2,:);        % Experimental acceleration data from LabView (mm/s^2)
acc_time = dataAcc(1,:);       % Time domain of acceleration Data (s)

% Analytical results of gear inerter
% Measurements of mass and dimensions are required to fill the variables
R = 0.024;             % Outer gear radius (m)
r = 0.0085;            % Inner gear radius (m)
m = 0.0572;            % (Relevant?)*** Mass of inerter (kg)
n = 2;                 % Number of gears in train
b_analytic = (R^2/r^2)^n * m;

% Filtering the data with infinite impulse response
alpha = 0.05;
%force_exp = IIR_WA(force_exp,alpha);
%acc_exp = IIR_WA(acc_exp,alpha);

% Frequency Domain Analysis
forceFD = fft(force_exp);       % Force data in frequency domain
accFD = fft(acc_exp);           % Acceleration data in frequency domain
F_exp = max(forceFD);           % Experimentally determined F value
a_exp = max(accFD);             % Experimentally determined a value

%% Plotting
% Plot of time domains overlapping
figure(1)
hold on
yyaxis left
ylabel('Force (N)')
%plot(force_time,force_exp,'bo')
yyaxis right
ylabel('Acceleration ($\frac{mm}{s^2}$)','Interpreter','latex')
plot(acc_time,acc_exp,'rs')
title('Inertance Data in Time Domain')
xlabel('Time (s)')
hold off


%% Functions
% IIR Filter Function
function [Y] = IIR_WA(X,alpha)
%IIR_MA is an infinite impulse response filter that utilizes a weighted average
%   X is the data set vector, while alpha is the weighting of the input
%
%   This function was written by Jensen Coombs for Wed. 3-6 lab

numPoints = length(X);
Y = zeros([1,numPoints]);

% Computing weighted average for each term
Yprev = 0;
    for i = 1:numPoints
        Y(i) = X(i)*alpha + Yprev*(1-alpha);
        Yprev = Y(i);
    end

end
